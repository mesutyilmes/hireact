{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["window","apiUrl","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","arr","data","changeInput","bind","assertThisInitialized","addItem","clickPic","name","console","log","newArray","slice","push","setState","e","_this2","newTodo","alan","http","post","then","res","status","concat","test","target","value","_this3","get","_this4","react_default","a","createElement","className","action","type","onChange","onClick","map","item","src","avatar","alt","id","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kSAKAA,OAAOC,OAAS,wDAuGDC,cApGb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,KAAM,GAAIC,IAAK,GAAIC,KAAM,IAE3BV,EAAKW,YAAcX,EAAKW,YAAYC,KAAjBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACnBA,EAAKc,QAAUd,EAAKc,QAAQF,KAAbX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACfA,EAAKe,SAAWf,EAAKe,SAASH,KAAdX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAPJA,wEASLgB,GACPC,QAAQC,IAAIF,GACZ,IAAIG,EAAWhB,KAAKI,MAAME,IAAIW,QAC9BD,EAASE,KAAKL,GACdb,KAAKmB,SAAS,CAAEb,IAAKU,oCAEfH,GAENC,QAAQC,IAAIF,GACZC,QAAQC,IAAI,iDAENK,GAAG,IAAAC,EAAArB,KACLgB,EAAWhB,KAAKI,MAAME,IAAIW,QAC9BD,EAASE,KAAKlB,KAAKI,MAAMC,MACzBL,KAAKmB,SAAS,CAAEb,IAAKU,IAGrB,IAAMM,EAAU,CACdT,KAAMb,KAAKI,MAAMC,KACjBkB,KAAO,SAETC,IAAKC,KAAK/B,OAAOC,OAAQ2B,GAASI,KAAK,SAAAC,GAClB,MAAfA,EAAIC,SACNP,EAAKF,SAAS,CACZd,KAAM,KAERS,QAAQC,IAAI,QAGZM,EAAKF,SAAS,CACZZ,KAAMc,EAAKjB,MAAMG,KAAKsB,OAAOF,EAAIpB,+CAS7Ba,GACV,IAAMU,EAAOV,EAAEW,OAAOC,MACT,UAATF,EACFhB,QAAQC,IAAI,cAGZD,QAAQC,IAAI,oBAEdf,KAAKmB,SAAS,CACZd,KAAMyB,gDAGU,IAAAG,EAAAjC,KAClBwB,IAAKU,IAAIxC,OAAOC,QAAQ+B,KAAK,SAAAC,GAC3BM,EAAKd,SAAS,CACZZ,KAAMoB,EAAIpB,0CAMP,IAAA4B,EAAAnC,KACP,OACEoC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WAClBF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,QAAME,OAAQxC,KAAKW,SACjByB,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OACVT,MAAOhC,KAAKI,MAAMC,KAClBqC,SAAU1C,KAAKQ,cAEjB4B,EAAAC,EAAAC,cAAA,SAAOG,KAAK,SAAST,MAAM,WAAWW,QAAS3C,KAAKW,WAItDyB,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WAEhBtC,KAAKI,MAAMG,KAAKqC,IAAI,SAAAC,GAClB,OAEET,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,OAAKK,QAASR,EAAKvB,SAASH,KAAK0B,EAAMU,EAAKhC,MAAOiC,IAAKD,EAAKE,OAAQC,IAAKH,EAAKhC,OAC/EuB,EAAAC,EAAAC,cAAA,SAAIO,EAAKI,GAAT,KAAeJ,EAAKhC,iBA5FlBqC,aCKEC,QACW,cAA7BzD,OAAO0D,SAASC,UAEe,UAA7B3D,OAAO0D,SAASC,UAEhB3D,OAAO0D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.e6c7747d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport http from 'axios';\r\n\r\n\r\nwindow.apiUrl = '//5cac37c8c85e05001452f0b9.mockapi.io/yilmes/test'\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      text: '', arr: [], data: []\r\n    }\r\n    this.changeInput = this.changeInput.bind(this)\r\n    this.addItem = this.addItem.bind(this)\r\n    this.clickPic = this.clickPic.bind(this)\r\n  }\r\n  clickPic(name) {\r\n    console.log(name);\r\n    var newArray = this.state.arr.slice();\r\n    newArray.push(name);\r\n    this.setState({ arr: newArray })\r\n  }\r\n  onClick(name) {\r\n\r\n    console.log(name);\r\n    console.log(\"=============\");\r\n  }\r\n  addItem(e) {\r\n    var newArray = this.state.arr.slice();\r\n    newArray.push(this.state.text);\r\n    this.setState({ arr: newArray })\r\n\r\n    //post\r\n    const newTodo = {\r\n      name: this.state.text,\r\n      alan : \"mesut\"\r\n    }\r\n    http.post(window.apiUrl, newTodo).then(res => {\r\n      if (res.status === 201) {\r\n        this.setState({\r\n          text: ''\r\n        })\r\n        console.log(\"frfr\");\r\n\r\n\r\n        this.setState({\r\n          data: this.state.data.concat(res.data)\r\n        })\r\n\r\n      }\r\n      //this.fromInput.removeAttribute('disabled')\r\n    })\r\n\r\n\r\n  }\r\n  changeInput(e) {\r\n    const test = e.target.value\r\n    if (test === \"mesut\") {\r\n      console.log(\"Doğru\");\r\n    }\r\n    else {\r\n      console.log(\"Yanlış\");\r\n    }\r\n    this.setState({\r\n      text: test\r\n    })\r\n  }\r\n  componentDidMount() {\r\n    http.get(window.apiUrl).then(res => {\r\n      this.setState({\r\n        data: res.data\r\n      })\r\n    })\r\n\r\n\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <br /><br /><br /><br />\r\n        <h1>Form</h1>\r\n        <form action={this.addItem}>\r\n          <input type=\"text\"\r\n            value={this.state.text}\r\n            onChange={this.changeInput}\r\n          />\r\n          <input type=\"button\" value=\"Click me\" onClick={this.addItem} />\r\n\r\n\r\n        </form>\r\n        <br /><br /><br /><br />\r\n        {\r\n          this.state.data.map(item => {\r\n            return (\r\n\r\n              <div>\r\n                \r\n                <img onClick={this.clickPic.bind(this, item.name)} src={item.avatar} alt={item.name} />\r\n                <p>{item.id}  {item.name}</p>\r\n              </div>\r\n            )\r\n          })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}